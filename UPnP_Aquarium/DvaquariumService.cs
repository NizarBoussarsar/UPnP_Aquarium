using OpenSource.UPnP;

namespace Aquarium
{
    /// <summary>
    /// Transparent DeviceSide UPnP Service
    /// </summary>
    public class DvaquariumService : IUPnPService
    {

        // Place your declarations above this line

        #region AutoGenerated Code Section [Do NOT Modify, unless you know what you're doing]
        //{{{{{ Begin Code Block

        private _DvaquariumService _S;
        public static string URN = "urn:schemas-upnp-org:service:service:1";
        public double VERSION
        {
           get
           {
               return(double.Parse(_S.GetUPnPService().Version));
           }
        }

        public delegate void OnStateVariableModifiedHandler(DvaquariumService sender);
        public event OnStateVariableModifiedHandler OnStateVariableModified_brightness;
        public event OnStateVariableModifiedHandler OnStateVariableModified_temperature;
        public System.Int32 Evented_brightness
        {
            get
            {
               return((System.Int32)_S.GetStateVariable("brightness"));
            }
            set
            {
               _S.SetStateVariable("brightness", value);
            }
        }
        public System.Int32 Evented_temperature
        {
            get
            {
               return((System.Int32)_S.GetStateVariable("temperature"));
            }
            set
            {
               _S.SetStateVariable("temperature", value);
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_brightness
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("brightness")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("brightness")).Accumulator = value;
            }
        }
        public double ModerationDuration_brightness
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("brightness")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("brightness")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_temperature
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("temperature")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("temperature")).Accumulator = value;
            }
        }
        public double ModerationDuration_temperature
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("temperature")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("temperature")).ModerationPeriod = value;
            }
        }
        public delegate System.Int32 Delegate_getBrightness();
        public delegate System.Int32 Delegate_getTemperature();
        public delegate void Delegate_setBrightness(System.Int32 inputBrightness);
        public delegate void Delegate_setTemperature(System.Int32 inputTemperature);

        public Delegate_getBrightness External_getBrightness = null;
        public Delegate_getTemperature External_getTemperature = null;
        public Delegate_setBrightness External_setBrightness = null;
        public Delegate_setTemperature External_setTemperature = null;

        public void RemoveStateVariable_brightness()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("brightness"));
        }
        public void RemoveStateVariable_temperature()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("temperature"));
        }
        public void RemoveAction_getBrightness()
        {
             _S.GetUPnPService().RemoveMethod("getBrightness");
        }
        public void RemoveAction_getTemperature()
        {
             _S.GetUPnPService().RemoveMethod("getTemperature");
        }
        public void RemoveAction_setBrightness()
        {
             _S.GetUPnPService().RemoveMethod("setBrightness");
        }
        public void RemoveAction_setTemperature()
        {
             _S.GetUPnPService().RemoveMethod("setTemperature");
        }
        public System.Net.IPEndPoint GetCaller()
        {
             return(_S.GetUPnPService().GetCaller());
        }
        public System.Net.IPEndPoint GetReceiver()
        {
             return(_S.GetUPnPService().GetReceiver());
        }

        private class _DvaquariumService
        {
            private DvaquariumService Outer = null;
            private UPnPService S;
            internal _DvaquariumService(DvaquariumService n)
            {
                Outer = n;
                S = BuildUPnPService();
            }
            public UPnPService GetUPnPService()
            {
                return(S);
            }
            public void SetStateVariable(string VarName, object VarValue)
            {
               S.SetStateVariable(VarName,VarValue);
            }
            public object GetStateVariable(string VarName)
            {
               return(S.GetStateVariable(VarName));
            }
            protected UPnPService BuildUPnPService()
            {
                UPnPStateVariable[] RetVal = new UPnPStateVariable[2];
                RetVal[0] = new UPnPModeratedStateVariable("brightness", typeof(System.Int32), true);
                RetVal[0].AddAssociation("getBrightness", "returnBrightness");
                RetVal[0].AddAssociation("setBrightness", "inputBrightness");
                RetVal[1] = new UPnPModeratedStateVariable("temperature", typeof(System.Int32), true);
                RetVal[1].AddAssociation("getTemperature", "returnTemperature");
                RetVal[1].AddAssociation("setTemperature", "inputTemperature");

                UPnPService S = new UPnPService(1, "urn:upnp-org:serviceId:001", URN, true, this);
                for(int i=0;i<RetVal.Length;++i)
                {
                   S.AddStateVariable(RetVal[i]);
                }
                S.AddMethod("getBrightness");
                S.AddMethod("getTemperature");
                S.AddMethod("setBrightness");
                S.AddMethod("setTemperature");
                return(S);
            }

            [OpenSource.UPnP.ReturnArgument("returnBrightness")]
            public System.Int32 getBrightness()
            {
                object RetObj = null;
                if (Outer.External_getBrightness != null)
                {
                    RetObj = Outer.External_getBrightness();
                }
                else
                {
                    RetObj = Sink_getBrightness();
                }
                return((System.Int32)RetObj);
            }
            [OpenSource.UPnP.ReturnArgument("returnTemperature")]
            public System.Int32 getTemperature()
            {
                object RetObj = null;
                if (Outer.External_getTemperature != null)
                {
                    RetObj = Outer.External_getTemperature();
                }
                else
                {
                    RetObj = Sink_getTemperature();
                }
                return((System.Int32)RetObj);
            }
            public void setBrightness(System.Int32 inputBrightness)
            {
                if (Outer.External_setBrightness != null)
                {
                    Outer.External_setBrightness(inputBrightness);
                }
                else
                {
                    Sink_setBrightness(inputBrightness);
                }
            }
            public void setTemperature(System.Int32 inputTemperature)
            {
                if (Outer.External_setTemperature != null)
                {
                    Outer.External_setTemperature(inputTemperature);
                }
                else
                {
                    Sink_setTemperature(inputTemperature);
                }
            }

            public Delegate_getBrightness Sink_getBrightness;
            public Delegate_getTemperature Sink_getTemperature;
            public Delegate_setBrightness Sink_setBrightness;
            public Delegate_setTemperature Sink_setTemperature;
        }
        public DvaquariumService()
        {
            _S = new _DvaquariumService(this);
            _S.GetUPnPService().GetStateVariableObject("brightness").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_brightness);
            _S.GetUPnPService().GetStateVariableObject("temperature").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_temperature);
            _S.Sink_getBrightness = new Delegate_getBrightness(getBrightness);
            _S.Sink_getTemperature = new Delegate_getTemperature(getTemperature);
            _S.Sink_setBrightness = new Delegate_setBrightness(setBrightness);
            _S.Sink_setTemperature = new Delegate_setTemperature(setTemperature);
        }
        public DvaquariumService(string ID):this()
        {
            _S.GetUPnPService().ServiceID = ID;
        }
        public UPnPService GetUPnPService()
        {
            return(_S.GetUPnPService());
        }
        private void OnModifiedSink_brightness(UPnPStateVariable sender, object NewValue)
        {
            if (OnStateVariableModified_brightness != null) OnStateVariableModified_brightness(this);
        }
        private void OnModifiedSink_temperature(UPnPStateVariable sender, object NewValue)
        {
            if (OnStateVariableModified_temperature != null) OnStateVariableModified_temperature(this);
        }
        //}}}}} End of Code Block

        #endregion

        /// <summary>
        /// Action: getBrightness
        /// </summary>
        /// <returns>Associated StateVariable: brightness</returns>
        public System.Int32 getBrightness()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: getTemperature
        /// </summary>
        /// <returns>Associated StateVariable: temperature</returns>
        public System.Int32 getTemperature()
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: setBrightness
        /// </summary>
        /// <param name="inputBrightness">Associated State Variable: brightness</param>
        public void setBrightness(System.Int32 inputBrightness)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: setTemperature
        /// </summary>
        /// <param name="inputTemperature">Associated State Variable: temperature</param>
        public void setTemperature(System.Int32 inputTemperature)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
    }
}